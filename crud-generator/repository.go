package yourmodel

// Code generated by "crud-generator"; Feel free to make changes in order to align repository to your business logic.

import (
	"context"
	"gorm.io/gorm"
)

type Repository interface {
	Insert(ctx context.Context, yourModel *YourModel) error
	Find(ctx context.Context, id uint) (*YourModel, error)
	Update(ctx context.Context, yourModel *YourModel) error
	Delete(ctx context.Context, yourModel *YourModel) error
}

type repository struct {
	db *gorm.DB
}

func NewRepository(db *gorm.DB) Repository {
	return &repository{db: db}
}

func (r *repository) Insert(ctx context.Context, yourModel *YourModel) error {
	result := r.db.WithContext(ctx).Create(yourModel)
	if result.Error != nil {
		return result.Error
	}

	return nil
}

func (r *repository) Find(ctx context.Context, id uint) (*YourModel, error) {
	yourModel := new(YourModel)

	result := r.db.WithContext(ctx).First(&yourModel)
	if result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return nil, errors.NotFoundWrap(result.Error, "db find")
		}

		return nil, errors.Wrap(result.Error, "db find")
	}

	return &YourModel, nil
}

func (r *repository) Update(ctx context.Context, yourModel *YourModel) error {
	result := r.db.WithContext(ctx).Save(yourModel)
	if result.Error != nil {
		return errors.Wrap(result.Error, "db update")
	}

	return nil
}

func (r *repository) Delete(ctx context.Context, yourModel *YourModel) error {
	if err := r.db.WithContext(ctx).Delete(yourModel).Error; err != nil {
		return errors.Wrap(err, "db delete")
	}

	return nil
}
