package main

import (
	"flag"
	"fmt"
	"os"
	"strings"
)

var repoTemplate string = `package %s

// Code generated by "crud-generator"; Feel free to make changes in order to align repository to your business logic.

import (
	"context"
	"gorm.io/gorm"
)

type Repository interface {
	Insert(ctx context.Context, %s *%s) error
	Find(ctx context.Context, id uint) (*%s, error)
	Update(ctx context.Context, %s *%s) error
	Delete(ctx context.Context, %s *%s) error
}

type repository struct {
	db *gorm.DB
}

func NewRepository(db *gorm.DB) Repository {
	return &repository{db: db}
}

func (r *repository) Insert(ctx context.Context, %s *%s) error {
	result := r.db.WithContext(ctx).Create(%s)
	if result.Error != nil {
		return result.Error
	}

	return nil
}

func (r *repository) Find(ctx context.Context, id uint) (*%s, error) {
	%s := new(%s)

	result := r.db.WithContext(ctx).First(&%s)
	if result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return nil, errors.NotFoundWrap(result.Error, "db find")
		}

		return nil, errors.Wrap(result.Error, "db find")
	}

	return &%s, nil
}

func (r *repository) Update(ctx context.Context, %s *%s) error {
	result := r.db.WithContext(ctx).Save(%s)
	if result.Error != nil {
		return errors.Wrap(result.Error, "db update")
	}

	return nil
}

func (r *repository) Delete(ctx context.Context, %s *%s) error {
	if err := r.db.WithContext(ctx).Delete(%s).Error; err != nil {
		return errors.Wrap(err, "db delete")
	}

	return nil
}
`

var serviceTemplate string = `package %s

// Code generated by "crud-generator"; Feel free to make changes in order to align service to your business logic.

import (
	"context"
)

type Service interface {
	Add(ctx context.Context, %s *%s) error
	Get(ctx context.Context, id uint) (*%s, error)
	Edit(ctx context.Context, %s *%s) error
	Remove(ctx context.Context, id uint) error
}

type service struct {
	repo Repository
}

func NewService(repo Repository) Service {
	return &service{repo: repo}
}

func (s *service) Add(ctx context.Context, %s *%s) error {
	err = s.repository.Insert(ctx, %s)
	if err != nil {
		return errors.Wrap(err, "repository insert")
	}

	return nil
}

func (s *service) Get(ctx context.Context, id uint) (*%s, error) {
	res, err := s.repository.Find(ctx, id)
	if err != nil {
		return nil, errors.Wrap(err, "repository find")
	}

	return res, nil
}

func (s *service) Edit(ctx context.Context, %s *%s) error {
	_, err := s.repository.Find(ctx, %s.ID)
	if err != nil {
		return errors.Wrap(err, "repository find")
	}
	
	if err = s.repository.Update(ctx, %s); err != nil {
		return errors.Wrap(err, "repository update")
	}

	return nil
}

func (s *service) Remove(ctx context.Context, id uint) error {
	_, err := s.repository.Find(ctx, id)
	if err != nil {
		return errors.Wrap(err, "repository find")
	}

	if err = s.repository.Delete(ctx, %s); err != nil {
		return errors.Wrap(err, "repository delete")
	}
}
`

// generateRepository generates the repository.go file.
func generateRepository(modelName string) {
	file, err := os.Create("repository.go")
	if err != nil {
		panic(err)
	}
	defer file.Close()

	modelVar := strings.ToLower(modelName[:1]) + modelName[1:]

	placeholders := []any{
		strings.ToLower(modelName), // 1. Package name
		modelVar,                   // 2. Variable name for the model instance (lowercase)
		modelName,                  // 3. Model name (uppercase, as a type)
		modelName,                  // 4. Model name (uppercase, as a type) for the Find method
		modelVar,                   // 5. Variable name for the model instance (lowercase) for the Update method
		modelName,                  // 6. Model name (uppercase, as a type) for the Update method
		modelVar,                   // 7. Variable name for the model instance (lowercase) for the Delete method
		modelName,                  // 8. Model name (uppercase, as a type) for the Delete method
		modelVar,                   // 9. Variable name for the model instance (lowercase) for the Insert method body
		modelName,                  // 10. Model name (uppercase, as a type) for the Insert method body
		modelVar,                   // 11. Variable name for the model instance (lowercase) for the Insert method body
		modelName,                  // 12. Model name (uppercase, as a type) for the Find method body
		modelVar,                   // 13. Variable name for the model instance (lowercase) for the Find method body
		modelName,                  // 14. Model name (uppercase, as a type) for the Find method body
		modelVar,                   // 15. Variable name for the model instance (lowercase) for the Find method body
		modelName,                  // 16. Model name (uppercase, as a type) for the Find method body
		modelVar,                   // 17. Variable name for the model instance (lowercase) for the Update method body
		modelName,                  // 18. Model name (uppercase, as a type) for the Update method body
		modelVar,                   // 19. Variable name for the model instance (lowercase) for the Update method body
		modelVar,                   // 20. Variable name for the model instance (lowercase) for the Delete method body
		modelName,                  // 21. Model name (uppercase, as a type) for the Delete method body
		modelVar,                   // 22. Variable name for the model instance (lowercase) for the Delete method body
	}

	if _, err := fmt.Fprintf(file, repoTemplate, placeholders...); err != nil {
		panic(err)
	}

	fmt.Println("Repository file has been generated.")
}

// generateService generates the service.go file.
func generateService(modelName string) {
	file, err := os.Create("service.go")
	if err != nil {
		panic(err)
	}
	defer file.Close()

	modelVar := strings.ToLower(modelName[:1]) + modelName[1:]

	placeholders := []any{
		strings.ToLower(modelName), // 1. Package name
		modelVar,                   // 2. Variable name for the model instance (lowercase) for Add method
		modelName,                  // 3. Model name (uppercase, as a type) for Add method
		modelName,                  // 4. Model name (uppercase, as a type) for Get method
		modelVar,                   // 5. Variable name for the model instance (lowercase) for Edit method
		modelName,                  // 6. Model name (uppercase, as a type) for Edit method
		modelVar,                   // 7. Variable name for the model instance (lowercase) for Add method body
		modelName,                  // 8. Model name (uppercase, as a type) for Add method body
		modelVar,                   // 9. Variable name for the model instance (lowercase) for Add method body
		modelName,                  // 10. Model name (uppercase, as a type) for Get method body
		modelVar,                   // 11. Variable name for the model instance (lowercase) for Edit method body
		modelName,                  // 12. Model name (uppercase, as a type) for Edit method body
		modelVar,                   // 13. Variable name for the model instance (lowercase) for Edit method body
		modelVar,                   // 14. Variable name for the model instance (lowercase) for Edit method body
		modelVar,                   // 15. Variable name for the model instance (lowercase) for Remove method body
	}

	if _, err := fmt.Fprintf(file, serviceTemplate, placeholders...); err != nil {
		panic(err)
	}

	fmt.Println("Service file has been generated.")
}

func main() {
	modelPtr := flag.String("model", "YourModel", "a string")
	flag.Parse()

	generateRepository(*modelPtr)
	generateService(*modelPtr)

	fmt.Println("Service and Repository files have been generated.")
}
